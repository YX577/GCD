function [dataInfo, strMethodDisp] = ds_catalog(strMethod, varDs, tPeriod)


%Downscaling methods:
if regexpbl(strMethod, 'direct')
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Direct resampling of projection simulations';
        dataInfo = { ...
            varDs, 'hr_grid', 'output-resolution coordinate grid'; ...
            varDs, 'proj_sim_ts', 'low-resolution projection time-series' ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Direct resampling of historical simulations';
        dataInfo = { ...
            varDs, 'hr_grid', 'output-resolution coordinate grid'; ...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    end
elseif regexpbl(strMethod, 'extract')
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Extracting points from projection simulations';
        dataInfo = { ...
            varDs, 'crd', 'extraction names and coordinates'; ...
            varDs, 'proj_sim_ts', 'low-resolution projection time-series' ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Extracting points from historical simulations';
        dataInfo = { ...
            varDs, 'crd', 'extraction names and coordinates'; ...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    end
elseif regexpbl(strMethod, 'subset')
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Extracting physical and temporal region from projection simulations';
        dataInfo = { ...
            varDs, 'proj_sim_ts', 'low-resolution projection time-series' ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Extracting physical and temporal region from historical simulations';
        dataInfo = { ...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    end    
elseif regexpbl(strMethod, 'delta')
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Delta change of projection simulations';
        dataInfo = {...
            varDs, 'hist_hr_clim', 'output-resolution historical reference climatology'; ...
            varDs, 'proj_sim_ts', 'low-resolution projection simulation time-series';...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Delta change of historical simulations';
        dataInfo = {...
            varDs, 'hist_hr_clim', 'output-resolution historical reference climatology'; ...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    end
elseif regexpbl(strMethod, 'tlapse')
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Temperature lapse rates of projection simulations';
        dataInfo = {...
            varDs, 'proj_sim_ts', 'low-resolution projection simulation time-series';...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'z', 'lr_sim_dem', 'low-resolution DEM aligning with simulation'; ...
            'z', 'hr_out_dem', 'output-resolution DEM for deriving output elevation'; ...
            'string', 'lapse_uiget', ['Enter the type of lapse rate partitioning to use (Options: ' char(39) '5NoSo' char(39) ' or ' char(39) 'all' char(39) ')'] ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Temperature lapse rates of historical simulations';
        dataInfo = {...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'z', 'lr_sim_dem', 'low-resolution DEM aligning with simulation'; ...
            'z', 'hr_out_dem', 'output-resolution DEM for deriving output elevation'; ...
            'string', 'lapse_type_uiget', ['Enter the type of lapse rate partitioning to use (Options: ' char(39) '5NoSo' char(39) ' or ' char(39) 'all' char(39) ')'] ...
            };
    end
elseif regexpbl(strMethod, 'pw') %Precipitable water scaling
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Precipitable water scaling of projection simulations';
        dataInfo = {...
            varDs, 'proj_sim_ts', 'low-resolution projection simulation time-series';...
%             varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'tcw', 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'z', 'lr_sim_dem', 'low-resolution DEM aligning with simulation'; ...
            'z', 'hr_out_dem', 'output-resolution DEM for deriving output elevation'; ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Precipitable water scaling of historical simulations';
        dataInfo = {...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'tcw', 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'z', 'lr_sim_dem', 'low-resolution DEM aligning with simulation'; ...
            'z', 'hr_out_dem', 'output-resolution DEM for deriving output elevation'; ...
            };
    end
elseif regexpbl(strMethod, 'roe') %Roe orographic model
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Roe orographic precipitation modeling of projection simulations';
        dataInfo = {...
            varDs, 'proj_sim_ts', 'low-resolution projection simulation time-series'; ...
            'tmp', 'proj_sim_ts', 'low-resolution projection simulation time-series'; ...
            'tmp', 'proj_out_ts', 'output-resolution projection simulation time-series'; ...
            'z', 'lr_sim_dem', 'low-resolution DEM aligning with low-resoltuion input simulation'; ...
            'z', 'hr_out_dem', 'output-resolution DEM aligning with output-resolution temperature simulation'; ...
            };
%         dataInfo = {...
%             varDs, 'proj_sim_ts', 'low-resolution projection simulation time-series';...
% %             varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
%             'tmp', 'proj_sim_ts', 'output-resolution projection simulation time-series'; ...
%             'tmp', 'hist_ref_ts', 'low-resolution reference time-series'; ...
%             'z', 'lr_sim_dem', 'low-resolution DEM aligning with simulation'; ...
%             'z', 'hr_out_dem', 'output-resolution DEM aligning with output-resolution temperature simulation'; ...
%             };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Roe orographic precipitation modeling of historical simulations';
        dataInfo = {...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'tmp', 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
            'tmp', 'hist_out_ts', 'output-resolution historical simulation time-series'; ...
            'z', 'lr_sim_dem', 'low-resolution DEM aligning with low-resoltuion input simulation'; ...
            'z', 'hr_out_dem', 'output-resolution DEM aligning with output-resolution temperature simulation'; ...
            };
    end
elseif regexpbl(strMethod, {'bc','only'}, 'and')
    if regexpbl(tPeriod, 'pro')
        strMethodDisp = 'Bias correction of projection simulations';
        dataInfo = {...
            varDs, 'proj_sim_ts', 'low-resolution projection simulation time-series';...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    elseif regexpbl(tPeriod, 'hist')
        strMethodDisp = 'Bias correction of historical simulations';
        dataInfo = {...
            varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series' ...
            };
    end
else
    error('dsCatalog:unknownType',['The downscaling method ' strMethod ...
        ' has not been programmed for. Add desired method to this function']);
end

%Gridded bias correction:
if regexpbl(strMethod, {'eQM', 'q2q'})
    if regexpbl(strMethod, '2var')
        strMethodDisp = [strMethodDisp ' bias corrected using empirical quantile mapping'];
        if regexpbl(tPeriod, 'pro')
        dataInfo = cat(1, dataInfo, ...
            {'unknown', 'proj_sim4bc_ts', 'low-resolution projection simulation time-series to use for training bias-correction'; ...
            'unknown', 'hist_sim4bc_ts', 'low-resolution historical simulation time-series to use for training bias-correction'});
        end
        dataInfo = cat(1, dataInfo, ...
            {'unknown', 'hist_sim4bc_ts', 'low-resolution historical simulation time-series to use for training bias-correction'; ...
            'unknown', 'hist_ref_ts', 'low-resolution historical reference time-series'});
    else
        strMethodDisp = [strMethodDisp ' bias corrected using empirical quantile mapping'];
        if regexpbl(tPeriod, 'pro')
            dataInfo = cat(1, dataInfo, ...
                {varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'});
        end
        dataInfo = cat(1, dataInfo, ...
            {varDs, 'hist_ref_ts', 'low-resolution historical reference time-series'});
    end

    if regexpbl(strMethod, 'eQM')
        
    elseif regexpbl(strMethod, 'Q2Q')
        strMethodDisp = [strMethodDisp ' bias corrected using empirical quantile-to-quantile mapping'];
    else
        error('dsCatalog:oneDbcMethodUnknown',['Bias correction method ' strMethod ' is not recognized.'])
    end
elseif regexpbl(strMethod, 'eJBC')
    strMethodDisp = [strMethodDisp ' bias corrected using empirical joint bias correction'];
    if regexpbl(varDs, {'tas','tmn','tmx','tav','tmean'})
        varExtBc = 'pr';
    elseif regexpbl(varDs, {'pre'}) || strcmpi(varDs, 'pr')
        varExtBc = 'tmp';
    else
        error('dsCatalog:unknownDsVar',['eJBC is not available for the '...
            'downscaling variable ' varDs ' has not been programmed for.']);
    end
    
    if regexpbl(tPeriod, 'pro')
        dataInfo = cat(1, dataInfo, ...
            {varDs, 'hist_sim_ts', 'low-resolution historical simulation time-series'});
    end
    dataInfo = cat(1, dataInfo, ...
        {varDs, 'hist_ref_ts', 'low-resolution historical reference time-series'});
    
    if regexpbl(tPeriod, 'pro')
        dataInfo = cat(1, dataInfo, ...
            {varExtBc, 'proj_sim_ts', 'low-resolution projection simulation time-series'});
    end
    dataInfo = cat(1, dataInfo, ...
        {varExtBc, 'hist_sim_ts', 'low-resolution historical simulation time-series'; ...
        varExtBc, 'hist_ref_ts', 'low-resolution historical reference time-series'});
end

%Bias correction using stations
if regexpbl(strMethod, 'stnAvg')
    strMethodDisp = [strMethodDisp ' with station record bias removal'];
    
    dataInfo = cat(1, dataInfo, ...
        {varDs, 'hist_rec_ts', 'station record time-series'});
    
    if ~regexpbl(strMethod, 'extract')
       warning('dsCatalog:methodNotExtract', ['Station average bias removal ' ...
           'only designed to work with method = extract.']) 
    end
end


%Check to ensure no repeats:
for ii = numel(dataInfo(:,1)) : -1 : 1
    indChck = setdiff((1:numel(dataInfo(:,1))),ii);
    if any(strcmpi(dataInfo(indChck,2), dataInfo{ii,2}) & strcmpi(dataInfo(indChck,1), dataInfo{ii,1}))
        dataInfo(ii,:) = [];
    end
end

%Display selection:
disp(['The GCD package is proceeding using ' strMethodDisp]);
disp(['The user will be required to locate ' num2str(numel(dataInfo(:,1))) ' inputs.']);

